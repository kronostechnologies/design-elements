{"version":3,"file":"data-table-stories.0894daa9.iframe.bundle.js","mappings":";;;;;;;;;;AAsEA;;;AA0rBA;;AAuaA","sources":["webpack://@equisoft/design-elements-storybook/./stories/data-table.stories.tsx"],"sourcesContent":["import { ReactElement, useMemo, useRef, useState } from 'react';\nimport { Button, Pagination, Table, TableColumn, TableData, TextInput, Tooltip } from '@equisoft/design-elements-react';\nimport { StoryFn as Story } from '@storybook/react';\nimport styled from 'styled-components';\nimport { rawCodeParameters } from './utils/parameters';\n\nexport default {\n    title: 'Components/Data Table',\n    component: Table,\n    parameters: rawCodeParameters,\n};\n\ninterface Data {\n    column1: string;\n    column2: string;\n    column3: string;\n}\n\nexport const Default: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n    ];\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\nconst StyledTable = styled(\n    ({ className, columns, data }) => (<Table<Data> className={className} columns={columns} data={data} />),\n)`\n    .column-1 {\n        box-sizing: border-box;\n        width: 150px;\n    }\n\n    .column-2 {\n        box-sizing: border-box;\n        width: 300px;\n    }\n`;\n\nexport const WithColumnClassnames: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            className: 'column-1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            className: 'column-2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            className: 'column-3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n    ];\n    return (\n        <StyledTable columns={columns} data={data} />\n    );\n};\n\ninterface FooterData {\n    column1: string;\n    column2: string;\n    numbers: number;\n}\n\nexport const WithFooter: Story = () => {\n    const data: TableData<FooterData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            numbers: 10,\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            numbers: 20,\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            numbers: 30,\n        },\n    ];\n\n    // Footer function for the 'numbers' column\n    const footerSum = (): ReactElement => {\n        const total = data.reduce((sum, row) => row.numbers + sum, 0);\n        return (\n            <span>\n                Total:\n                {total}\n            </span>\n        );\n    };\n\n    // Calculate the total sum of 'numbers'\n    const columns: TableColumn<FooterData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            footer: 'Footer with colspan',\n            footerColSpan: 2,\n\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            footerColSpan: 0,\n        },\n        {\n            header: 'Numbers',\n            accessorKey: 'numbers',\n            footer: footerSum,\n        },\n    ];\n\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\nexport const ErrorRows: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            error: true,\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n            error: true,\n        },\n    ];\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\nexport const Striped: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n        },\n    ];\n    return (\n        <Table striped columns={columns} data={data} />\n    );\n};\n\nexport const RowNumbers: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n    ];\n    return (\n        <Table rowNumbers columns={columns} data={data} />\n    );\n};\n\nexport const SmallRows: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n    ];\n    return (\n        <Table rowSize=\"small\" columns={columns} data={data} />\n    );\n};\n\nexport const LargeRows: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n    ];\n    return (\n        <Table rowSize=\"large\" columns={columns} data={data} />\n    );\n};\n\nexport const RowClickCallback: Story = () => {\n    interface DataWithHref {\n        column1: string;\n        column2: string;\n        column3: string;\n        href: string;\n    }\n\n    const columns: TableColumn<DataWithHref>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<DataWithHref>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n            href: '/row1',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            href: '/row2',\n        },\n    ];\n\n    return (\n        <Table<DataWithHref>\n            columns={columns}\n            data={data}\n            onRowClick={(row) => {\n                console.info('row: ', row);\n                console.info('href: ', row.original.href);\n            }}\n        />\n    );\n};\n\nexport const CustomTextAlignment: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            textAlign: 'center',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            textAlign: 'right',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'Hello',\n            column2: 'World',\n            column3: 'Hello',\n        },\n        {\n            column1: 'Hello',\n            column2: 'World',\n            column3: 'Hello',\n        },\n    ];\n\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\ninterface ComplexData {\n    category: {\n        value: string;\n        tooltip?: string;\n    };\n    amount?: string;\n}\n\nconst CategoryCell = ({ cellValue }: { cellValue: ComplexData['category'] }): ReactElement => {\n    const { value, tooltip } = cellValue;\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <p style={{ marginRight: 'var(--spacing-half)' }}>{value}</p>\n            {tooltip && <Tooltip label={tooltip} />}\n        </div>\n    );\n};\n\nconst AmountHeader = (): ReactElement => (\n    <div style={{ textAlign: 'right' }}>Amount ($)</div>\n);\nconst AmountCell = ({ cellValue }: { cellValue: ComplexData['amount'] }): ReactElement => (\n    <div style={{ textAlign: 'right' }}>{cellValue}</div>\n);\n\nexport const CustomColumns: Story = () => {\n    const data: ComplexData[] = [\n        {\n            category: {\n                value: 'Safety fund',\n                tooltip: 'Money for emergencies',\n            },\n            amount: '2000$',\n        },\n        {\n            category: {\n                value: 'Investments',\n            },\n            amount: '12000$',\n        },\n    ];\n\n    const columns: TableColumn<ComplexData>[] = [\n        {\n            header: 'Category',\n            accessorKey: 'category',\n            // eslint-disable-next-line react/no-unstable-nested-components\n            cell: (props) => <CategoryCell cellValue={props.cell.getValue() as ComplexData['category']} />,\n        },\n        {\n            header: AmountHeader,\n            accessorKey: 'amount',\n            // eslint-disable-next-line react/no-unstable-nested-components\n            cell: (props) => <AmountCell cellValue={props.cell.getValue() as ComplexData['amount']} />,\n        },\n    ];\n\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\nexport const SortableRows: Story = () => {\n    interface SortableData {\n        column1: string;\n        column2: string;\n        column3: number;\n        column4: string;\n    }\n\n    const columns: TableColumn<SortableData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            sortable: true,\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            sortable: true,\n        },\n        {\n            header: 'Custom sort by length',\n            accessorKey: 'column4',\n            sortable: true,\n            sortingFn: (rowA, rowB) => {\n                const a = rowA.original.column4;\n                const b = rowB.original.column4;\n\n                if (a.length === b.length) {\n                    return 0;\n                }\n\n                return a.length > b.length ? 1 : -1;\n            },\n        },\n    ];\n\n    const data: TableData<SortableData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 10,\n            column4: 'short',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 20,\n            column4: 'loooooong',\n        },\n    ];\n    return (\n        <Table columns={columns} data={data} defaultSort={{ id: 'column2', desc: false }} />\n    );\n};\n\nexport const SelectableRows: Story = () => {\n    interface SelectableData {\n        column1: string;\n        column2: string;\n        column3: number;\n    }\n\n    const columns: TableColumn<SelectableData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<SelectableData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 10,\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 20,\n        },\n    ];\n    return (\n        <Table selectableRows columns={columns} data={data} onSelectedRowsChange={console.info} />\n    );\n};\n\nexport const ExpandableSubrowsMultiple: Story = () => {\n    interface ExpandableData {\n        id: string;\n        name: string;\n    }\n\n    const columns: TableColumn<ExpandableData>[] = [\n        {\n            header: 'ID',\n            accessorKey: 'id',\n        },\n        {\n            header: 'Name',\n            accessorKey: 'name',\n        },\n    ];\n\n    const data: TableData<ExpandableData>[] = [\n        {\n            id: '1',\n            name: 'AAA',\n            subRows: [\n                { id: '1.A', name: 'AAA-1' },\n                { id: '1.B', name: 'AAA-2' },\n            ],\n        },\n        {\n            id: '2',\n            name: 'BBB',\n            subRows: [\n                { id: '2.A', name: 'BBB-1' },\n                { id: '2.B', name: 'BBB-2' },\n            ],\n        },\n    ];\n    return (\n        <Table\n            columns={columns}\n            data={data}\n            expandableRows='multiple'\n        />\n    );\n};\n\nexport const ExpandableSubrowsSingle: Story = () => {\n    interface ExpandableData {\n        id: string;\n        name: string;\n    }\n\n    const columns: TableColumn<ExpandableData>[] = [\n        {\n            header: 'ID',\n            accessorKey: 'id',\n        },\n        {\n            header: 'Name',\n            accessorKey: 'name',\n        },\n    ];\n\n    const data: TableData<ExpandableData>[] = [\n        {\n            id: '1',\n            name: 'AAA',\n            subRows: [\n                { id: '1.1', name: 'AAA-1' },\n                { id: '1.2', name: 'AAA-2' },\n            ],\n        },\n        {\n            id: '2',\n            name: 'BBB',\n            subRows: [\n                { id: '2.1', name: 'BBB-1' },\n                { id: '2.2', name: 'BBB-2' },\n            ],\n        },\n    ];\n    return (\n        <Table\n            columns={columns}\n            data={data}\n            expandableRows='single'\n        />\n    );\n};\n\nexport const ExpandableSubContent: Story = () => {\n    interface ExpandableData {\n        id: string;\n        name: string;\n    }\n\n    const columns: TableColumn<ExpandableData>[] = [\n        {\n            header: 'ID',\n            accessorKey: 'id',\n        },\n        {\n            header: 'Name',\n            accessorKey: 'name',\n        },\n    ];\n\n    const data: TableData<ExpandableData>[] = [\n        {\n            id: '1',\n            name: 'AAA',\n            subContent: 'Sub content in plain text',\n        },\n        {\n            id: '2',\n            name: 'BBB',\n            subContent: (\n                <>\n                    Sub content with HTML\n                    <br />\n                    <b>BBB</b>\n                </>\n            ),\n        },\n    ];\n\n    return (\n        <Table\n            columns={columns}\n            data={data}\n            expandableRows='single'\n        />\n    );\n};\n\ninterface StickyData {\n    column1: string;\n    column2: string;\n    column3: string;\n    column4: string;\n    column5: string;\n    column6: string;\n    column7: string;\n    column8: string;\n    column9: string;\n    column10: string;\n    column11: string;\n    column12: string;\n    column13: string;\n    column14: string;\n    column15: string;\n}\n\nconst ScrollableWrap = styled.div`\n    max-height: 400px;\n    overflow: auto;\n`;\n\nexport const Sticky: Story = () => {\n    const columns: TableColumn<StickyData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            sticky: true,\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            sticky: true,\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n        },\n        {\n            header: 'Column 4',\n            accessorKey: 'column4',\n        },\n        {\n            header: 'Column 5',\n            accessorKey: 'column5',\n        },\n        {\n            header: 'Column 6',\n            accessorKey: 'column6',\n        },\n        {\n            header: 'Column 7',\n            accessorKey: 'column7',\n        },\n        {\n            header: 'Column 8',\n            accessorKey: 'column8',\n        },\n        {\n            header: 'Column 9',\n            accessorKey: 'column9',\n        },\n        {\n            header: 'Column 10',\n            accessorKey: 'column10',\n        },\n        {\n            header: 'Column 11',\n            accessorKey: 'column11',\n        },\n        {\n            header: 'Column 12',\n            accessorKey: 'column12',\n        },\n        {\n            header: 'Column 13',\n            accessorKey: 'column13',\n        },\n        {\n            header: 'Column 14',\n            accessorKey: 'column14',\n        },\n        {\n            header: 'Column 15',\n            accessorKey: 'column15',\n        },\n    ];\n\n    const data: TableData<StickyData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n            column4: 'a',\n            column5: 'a',\n            column6: 'a',\n            column7: 'a',\n            column8: 'a',\n            column9: 'a',\n            column10: 'a',\n            column11: 'a',\n            column12: 'a',\n            column13: 'a',\n            column14: 'a',\n            column15: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            column4: 'b',\n            column5: 'b',\n            column6: 'b',\n            column7: 'b',\n            column8: 'b',\n            column9: 'b',\n            column10: 'b',\n            column11: 'b',\n            column12: 'b',\n            column13: 'b',\n            column14: 'b',\n            column15: 'b',\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n            column4: 'c',\n            column5: 'c',\n            column6: 'c',\n            column7: 'c',\n            column8: 'c',\n            column9: 'c',\n            column10: 'c',\n            column11: 'c',\n            column12: 'c',\n            column13: 'c',\n            column14: 'c',\n            column15: 'c',\n            error: true,\n        },\n        {\n            column1: 'd',\n            column2: 'd',\n            column3: 'd',\n            column4: 'd',\n            column5: 'd',\n            column6: 'd',\n            column7: 'd',\n            column8: 'd',\n            column9: 'd',\n            column10: 'd',\n            column11: 'd',\n            column12: 'd',\n            column13: 'd',\n            column14: 'd',\n            column15: 'd',\n        },\n        {\n            column1: 'e',\n            column2: 'e',\n            column3: 'e',\n            column4: 'e',\n            column5: 'e',\n            column6: 'e',\n            column7: 'e',\n            column8: 'e',\n            column9: 'e',\n            column10: 'e',\n            column11: 'e',\n            column12: 'e',\n            column13: 'e',\n            column14: 'e',\n            column15: 'e',\n        },\n        {\n            column1: 'f',\n            column2: 'f',\n            column3: 'f',\n            column4: 'f',\n            column5: 'f',\n            column6: 'f',\n            column7: 'f',\n            column8: 'f',\n            column9: 'f',\n            column10: 'f',\n            column11: 'f',\n            column12: 'f',\n            column13: 'f',\n            column14: 'f',\n            column15: 'f',\n        },\n        {\n            column1: 'g',\n            column2: 'g',\n            column3: 'g',\n            column4: 'g',\n            column5: 'g',\n            column6: 'g',\n            column7: 'g',\n            column8: 'g',\n            column9: 'g',\n            column10: 'g',\n            column11: 'g',\n            column12: 'g',\n            column13: 'g',\n            column14: 'g',\n            column15: 'g',\n        },\n        {\n            column1: 'h',\n            column2: 'h',\n            column3: 'h',\n            column4: 'h',\n            column5: 'h',\n            column6: 'h',\n            column7: 'h',\n            column8: 'h',\n            column9: 'h',\n            column10: 'h',\n            column11: 'h',\n            column12: 'h',\n            column13: 'h',\n            column14: 'h',\n            column15: 'h',\n        },\n        {\n            column1: 'i',\n            column2: 'i',\n            column3: 'i',\n            column4: 'i',\n            column5: 'i',\n            column6: 'i',\n            column7: 'i',\n            column8: 'i',\n            column9: 'i',\n            column10: 'i',\n            column11: 'i',\n            column12: 'i',\n            column13: 'i',\n            column14: 'i',\n            column15: 'i',\n        },\n    ];\n\n    return (\n        <ScrollableWrap>\n            <Table columns={columns} data={data} stickyHeader onRowClick={(row) => console.info('row: ', row)} />\n        </ScrollableWrap>\n    );\n};\n\ninterface StickyHeaderFooterData {\n    column1: string;\n    column2: string;\n    column3: string;\n    column4: string;\n}\n\nexport const StickyFooter: Story = () => {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            footer: 'Footer 1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            footer: 'Footer 2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            footer: 'Footer 3',\n        },\n        {\n            header: 'Column 4',\n            accessorKey: 'column4',\n            footer: 'Footer 4',\n        },\n    ];\n\n    const data: TableData<StickyHeaderFooterData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n            column4: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            column4: 'b',\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n            column4: 'c',\n        },\n        {\n            column1: 'd',\n            column2: 'd',\n            column3: 'd',\n            column4: 'd',\n        },\n        {\n            column1: 'e',\n            column2: 'e',\n            column3: 'e',\n            column4: 'e',\n        },\n        {\n            column1: 'f',\n            column2: 'f',\n            column3: 'f',\n            column4: 'f',\n        },\n        {\n            column1: 'g',\n            column2: 'g',\n            column3: 'g',\n            column4: 'g',\n        },\n        {\n            column1: 'h',\n            column2: 'h',\n            column3: 'h',\n            column4: 'h',\n        },\n        {\n            column1: 'i',\n            column2: 'i',\n            column3: 'i',\n            column4: 'i',\n        },\n    ];\n\n    return (\n        <ScrollableWrap>\n            <Table columns={columns} data={data} stickyFooter onRowClick={(row) => console.info('row: ', row)} />\n        </ScrollableWrap>\n    );\n};\n\nexport const StickyHeaderAndFooter: Story = () => {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            footer: 'Footer 1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            footer: 'Footer 2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            footer: 'Footer 3',\n        },\n        {\n            header: 'Column 4',\n            accessorKey: 'column4',\n            footer: 'Footer 4',\n        },\n    ];\n\n    const data: TableData<StickyHeaderFooterData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n            column4: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            column4: 'b',\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n            column4: 'c',\n        },\n        {\n            column1: 'd',\n            column2: 'd',\n            column3: 'd',\n            column4: 'd',\n        },\n        {\n            column1: 'e',\n            column2: 'e',\n            column3: 'e',\n            column4: 'e',\n        },\n        {\n            column1: 'f',\n            column2: 'f',\n            column3: 'f',\n            column4: 'f',\n        },\n        {\n            column1: 'g',\n            column2: 'g',\n            column3: 'g',\n            column4: 'g',\n        },\n        {\n            column1: 'h',\n            column2: 'h',\n            column3: 'h',\n            column4: 'h',\n        },\n        {\n            column1: 'i',\n            column2: 'i',\n            column3: 'i',\n            column4: 'i',\n        },\n    ];\n\n    return (\n        <ScrollableWrap>\n            <Table\n                columns={columns}\n                data={data}\n                stickyHeader\n                stickyFooter\n                onRowClick={(row) => console.info('row: ', row)}\n            />\n        </ScrollableWrap>\n    );\n};\n\nconst StyledTableWithBackground = styled(Table<StickyHeaderFooterData>)`\n    background: #a9cad8;\n`;\n\nexport const WithBackgroundColor: Story = () => {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [\n        {\n            header: 'Column 1',\n            accessorKey: 'column1',\n            footer: 'Footer 1',\n        },\n        {\n            header: 'Column 2',\n            accessorKey: 'column2',\n            footer: 'Footer 2',\n        },\n        {\n            header: 'Column 3',\n            accessorKey: 'column3',\n            footer: 'Footer 3',\n        },\n        {\n            header: 'Column 4',\n            accessorKey: 'column4',\n            footer: 'Footer 4',\n        },\n    ];\n\n    const data: TableData<StickyHeaderFooterData>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n            column4: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n            column4: 'b',\n        },\n        {\n            column1: 'c',\n            column2: 'c',\n            column3: 'c',\n            column4: 'c',\n        },\n        {\n            column1: 'd',\n            column2: 'd',\n            column3: 'd',\n            column4: 'd',\n        },\n        {\n            column1: 'e',\n            column2: 'e',\n            column3: 'e',\n            column4: 'e',\n        },\n        {\n            column1: 'f',\n            column2: 'f',\n            column3: 'f',\n            column4: 'f',\n        },\n        {\n            column1: 'g',\n            column2: 'g',\n            column3: 'g',\n            column4: 'g',\n        },\n        {\n            column1: 'h',\n            column2: 'h',\n            column3: 'h',\n            column4: 'h',\n        },\n        {\n            column1: 'i',\n            column2: 'i',\n            column3: 'i',\n            column4: 'i',\n        },\n    ];\n\n    return (\n        <ScrollableWrap>\n            <StyledTableWithBackground\n                selectableRows\n                stickyHeader\n                stickyFooter\n                columns={columns}\n                data={data}\n                onSelectedRowsChange={console.info}\n            />\n        </ScrollableWrap>\n    );\n};\n\nexport const HeaderAriaLabel: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Column with text',\n            headerAriaLabel: '',\n            accessorKey: 'column1',\n        },\n        {\n            header: '',\n            headerAriaLabel: 'Column 2 aria label',\n            accessorKey: 'column2',\n        },\n        {\n            header: 'Column 3 with text',\n            headerAriaLabel: '',\n            accessorKey: 'column3',\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n    ];\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\nexport const GroupedHeaders: Story = () => {\n    const columns: TableColumn<Data>[] = [\n        {\n            header: 'Group 1',\n            columns: [\n                {\n                    header: 'Column 1',\n                    accessorKey: 'column1',\n                },\n                {\n                    header: 'Column 2',\n                    accessorKey: 'column2',\n                },\n            ],\n        },\n        {\n            header: 'Group 2',\n            columns: [\n                {\n                    header: 'Column 3',\n                    accessorKey: 'column3',\n                },\n            ],\n        },\n    ];\n\n    const data: TableData<Data>[] = [\n        {\n            column1: 'a',\n            column2: 'a',\n            column3: 'a',\n        },\n        {\n            column1: 'b',\n            column2: 'b',\n            column3: 'b',\n        },\n    ];\n\n    return (\n        <Table columns={columns} data={data} />\n    );\n};\n\ninterface OptimizationData {\n    id: number;\n    name: string;\n    country: string;\n}\n\nexport const Optimization: Story = () => {\n    const [data, setData] = useState<OptimizationData[]>([\n        {\n            id: 1,\n            name: 'Jennifer',\n            country: 'Canada',\n        },\n        {\n            id: 2,\n            name: 'William',\n            country: 'USA',\n        },\n    ]);\n\n    const [allowEditing, setAllowEditing] = useState<boolean>(true);\n\n    const allowEditingRef = useRef<boolean>();\n    allowEditingRef.current = allowEditing;\n\n    const columns: TableColumn<OptimizationData>[] = useMemo(() => [\n        {\n            header: 'ID',\n            accessorKey: 'id',\n        },\n        {\n            header: 'Name',\n            accessorKey: 'name',\n            // eslint-disable-next-line react/no-unstable-nested-components\n            cell: ({ row }) => (allowEditingRef.current ? (\n                <TextInput\n                    noMargin\n                    value={row.original.name}\n                    onChange={(event) => {\n                        setData((prev) => prev.map((d) => (\n                            d.id === row.original.id\n                                ? { ...d, name: event.target.value }\n                                : d\n                        )));\n                    }}\n                />\n            ) : row.original.name),\n        },\n        {\n            header: 'Country',\n            accessorKey: 'country',\n        },\n    ], []);\n\n    return (\n        <>\n            <p>\n                When the component is re-rendering, it will always update the table with the provided data and columns,\n                even when you pass the same data and columns. But the very important key here is if you pass a\n                different **columns** object between renders, the table will UNMOUNT and RE-MOUNT every cell instead\n                of doing the usual React update. This will impact the performance and could create unwanted behaviors.\n                To prevent this, you should give the column definitions a stable identity by memoizing it\n                (ex: store it in a useMemo or useState hook).\n            </p>\n            <p style={{ marginBottom: '2rem' }}>\n                Additionally, if your columns use some dependencies, you can pass them via useRef instead, so you\n                don&apos;t have to recreate the columns object everytime the dependencies changes.\n            </p>\n            <p>\n                <Button type=\"button\" buttonType='secondary' onClick={() => setAllowEditing(!allowEditing)}>\n                    Toggle Editable\n                </Button>\n            </p>\n            <Table\n                columns={columns}\n                data={data}\n            />\n        </>\n    );\n};\n\ninterface TablePaginationData {\n    id: number;\n    age: number;\n    country: string;\n}\n\nfunction makeData(): TableData<TablePaginationData>[] {\n    const countries = ['Canada', 'United States', 'France', 'Germany', 'Italy', 'Spain', 'Portugal', 'Japan'];\n    return [...Array(35).keys()].map((i) => ({\n        id: i + 1,\n        age: Math.floor(Math.random() * 90) + 10,\n        country: countries[Math.floor(Math.random() * countries.length)],\n    }));\n}\n\nexport const TableWithPagination: Story = () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function sortFn(a: any, b: any, isDescending = false): number {\n        let compareValue = 0;\n\n        if (typeof a === 'string') {\n            compareValue = a.localeCompare(b, 'en', { sensitivity: 'base' });\n        } else if (typeof a === 'number') {\n            compareValue = a - b;\n        }\n\n        if (isDescending) {\n            return compareValue * -1;\n        }\n\n        return compareValue;\n    }\n\n    const ITEMS_PER_PAGE = 10;\n\n    const [data, setData] = useState<TableData<TablePaginationData>[]>(makeData());\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const columns: TableColumn<TablePaginationData>[] = useMemo(() => [\n        {\n            header: 'ID',\n            accessorKey: 'id',\n            sortable: true,\n            sortDescFirst: false,\n        },\n        {\n            header: 'Age',\n            accessorKey: 'age',\n            sortable: true,\n        },\n        {\n            header: 'Country',\n            accessorKey: 'country',\n            sortable: true,\n        },\n    ], []);\n\n    const currentPageData = data.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);\n\n    return (\n        <>\n            <Table\n                columns={columns}\n                data={currentPageData}\n                defaultSort={{ id: 'id', desc: false }}\n                onSort={(sort) => {\n                    if (sort) {\n                        const key = sort.id as keyof TablePaginationData;\n                        setData([...data].sort((a, b) => sortFn(a[key], b[key], sort.desc)));\n                    }\n                }}\n                manualSort\n            />\n            <Pagination\n                resultsPerPage={ITEMS_PER_PAGE}\n                numberOfResults={data.length}\n                activePage={currentPage}\n                onPageChange={(page) => setCurrentPage(page)}\n                pagesShown={5}\n            />\n        </>\n    );\n};\n"],"names":[],"sourceRoot":""}