version: 2.1

variables:
  - &working_directory '~/design-elements'
  - &react_directory '~/design-elements/packages/react'
  - &storybook_directory '~/design-elements/packages/storybook'
  - &web_directory '~/design-elements/packages/web'

executors:
  node:
    docker:
      - image: 'circleci/node:10.16.3'

commands:
  attach_at_working_directory:
    steps:
      - attach_workspace:
          at: *working_directory

  node_deps_cache_restore:
    parameters:
      directory:
        type: string
    steps:
      - restore_cache:
          name: Restoring NodeJS dependencies cache (node_modules)
          key: &yarn_cache 'v3-yarn-<< parameters.directory >>-{{ checksum "yarn.lock" }}'

  node_deps_cache_save:
    parameters:
      directory:
        type: string
    steps:
      - save_cache:
          name: Saving NodeJS dependencies cache (node_modules)
          key: *yarn_cache
          paths:
            - 'node_modules'

  node_deps_install:
    parameters:
      directory:
        type: string
    steps:
      - node_deps_cache_restore:
          directory: << parameters.directory >>
      - run: test -d node_modules || yarn --non-interactive --no-progress --frozen-lockfile
      - node_deps_cache_save:
          directory: << parameters.directory >>

  yarn_lint:
    steps:
      - run: yarn lint:ci
      - store_test_results:
          path: build/lint
  
  git_config:
    steps:
      - run: git config --global user.email "na-qc@equisoft.com" && git config --global user.name "circleci"

  yarn_test:
    steps:
      - run: yarn test:ci
      - store_test_results:
          path: build/tests

  yalc_push:
    parameters:
      display_name:
        type: string
      working_directory:
        type: string
    steps:
      - run:
          name: 'Yalc push << parameters.display_name >>'
          command: 'yalc push'
          working_directory: << parameters.working_directory >>

  yalc_add_packages:
    parameters:
      packages:
        type: string
      working_directory:
        type: string
    steps:
      - run:
          name: 'Yalc add << parameters.packages >>'
          command: 'yalc add << parameters.packages >>'
          working_directory: << parameters.working_directory >>

jobs:
  prepare_workspace:
    executor: "node"
    working_directory: *working_directory
    steps:
      - checkout
      - persist_to_workspace:
          root: '.'
          paths: '.'

  node_install_deps:
    executor: "node"
    parameters:
      directory:
        type: string
    working_directory: << parameters.directory >>
    steps:
      - attach_at_working_directory
      - node_deps_install:
          directory: << parameters.directory >>
      - persist_to_workspace:
          root: *working_directory
          paths: 
          - '*/*/node_modules'
          - 'node_modules'

  yarn_lint:
    executor: "node"
    parameters:
      directory:
        type: string
    working_directory: << parameters.directory >>
    steps:
      - attach_at_working_directory
      - node_deps_cache_restore:
          directory: << parameters.directory >>
      - yarn_lint

  yarn_test:
    executor: "node"
    parameters:
      directory:
        type: string
    working_directory: << parameters.directory >>
    steps:
      - attach_at_working_directory
      - node_deps_cache_restore:
          directory: << parameters.directory >>
      - yarn_test

  yarn_build:
    executor: "node"
    parameters:
      directory:
        type: string
      use_workspace:
        type: boolean
        default: false
    working_directory: << parameters.directory >>
    steps:
      - attach_at_working_directory
      - unless:
          condition: << parameters.use_workspace >>
          steps:
            - node_deps_cache_restore:
                directory: << parameters.directory >>
      - run: yarn build
      - persist_to_workspace:
          root: *working_directory
          paths:
            - '*/*/dist'

  yalc_push:
    executor: "node"
    working_directory: *working_directory
    steps:
      - attach_at_working_directory
      - run: sudo npm i -g yalc
      - yalc_push:
          display_name: '@equisoft/design-elements-web'
          working_directory: *web_directory
      - yalc_push:
          display_name: '@equisoft/design-elements-react'
          working_directory: *react_directory
      - yalc_add_packages:
          packages: '@equisoft/design-elements-web @equisoft/design-elements-react'
          working_directory: *storybook_directory
      - persist_to_workspace:
          root: *working_directory
          paths:
            - '*/*/.yalc'
            - '*/*/node_modules'
  
  lerna_version_prerelease:
    executor: "node"
    parameters:
      display_name:
        type: string
      working_directory:
        type: string
    steps:
      - attach_at_working_directory
      - git_config
      - add_ssh_keys:
          fingerprints:
            - "a3:81:0b:19:67:3f:89:0a:e9:1b:1a:38:a6:02:0e:93"
      - run:
          name: 'Yalc push << parameters.display_name >>'
          working_directory: << parameters.working_directory >>
          command: 'ssh-keyscan -H github.com >> ~/.ssh/known_hosts && git pull origin dev/DE-105 && yarn cache clean && yarn lerna version prerelease --yes -m "chore(prerelease): %s [ci skip]"'
  
  publish_to_npm:
    executor: "node"
    parameters:
      display_name:
        type: string
      working_directory:
        type: string
    steps:
      - attach_at_working_directory
      - add_ssh_keys:
          fingerprints:
            - "a3:81:0b:19:67:3f:89:0a:e9:1b:1a:38:a6:02:0e:93"
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npm"
      - run:
          name: Git pull
          working_directory: << parameters.working_directory >>
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts && git pull origin dev/DE-105
      - run:
          name: Publish Storybook package
          working_directory: *storybook_directory
          command: npm publish
      - run:
          name: Publish Web package
          working_directory: *web_directory
          command: npm publish
      - run:
          name: Publish React package
          working_directory: *react_directory
          command: npm publish

  deploy:
    executor: "node"
    steps:
      - attach_workspace:
          at: ~/design-elements
      - run:
          name: Authenticate with registry
          command: export NPM_TOKEN
      - run:
          name: Publish storybook
          working_directory: *storybook_directory
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc && npm publish --access=public
      - run:
          name: Publish react
          working_directory: *react_directory
          command: export NPM_TOKEN; npm publish --access=public
      - run:
          name: Publish web
          working_directory: *web_directory
          command: npm publish --access=public


workflows:
  version: 2

  build:
    jobs:
      - prepare_workspace: &branch_filters
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/

      ### WEB
      - node_install_deps:
          name: web_node_install_deps
          directory: *web_directory
          <<: *branch_filters
          requires:
            - prepare_workspace
      - yarn_lint:
          name: web_yarn_lint
          directory: *web_directory
          <<: *branch_filters
          requires:
            - web_node_install_deps

      ### REACT
      - node_install_deps:
          name: react_node_install_deps
          directory: *react_directory
          <<: *branch_filters
          requires:
            - prepare_workspace
      - yarn_lint:
          name: react_yarn_lint
          directory: *react_directory
          <<: *branch_filters
          requires:
            - react_node_install_deps
      - yarn_test:
          name: react_yarn_test
          directory: *react_directory
          <<: *branch_filters
          requires:
            - react_node_install_deps
      - yarn_build:
          name: react_yarn_build
          directory: *react_directory
          <<: *branch_filters
          requires:
            - react_node_install_deps

      ### STORYBOOK
      - node_install_deps:
          name: storybook_node_install_deps
          directory: *storybook_directory
          <<: *branch_filters
          requires:
            - prepare_workspace
      - yalc_push:
          name: storybook_yalc_push
          requires:
            - storybook_node_install_deps
            - web_yarn_lint
            - react_yarn_build
      - yarn_lint:
          name: storybook_yarn_lint
          directory: *storybook_directory
          <<: *branch_filters
          requires:
            - storybook_yalc_push
      - yarn_build:
          name: storybook_yarn_build
          directory: *storybook_directory
          use_workspace: true
          <<: *branch_filters
          requires:
            - storybook_yalc_push
      
      ### PRERELEASE
      - node_install_deps:
          name: root_node_install_deps
          directory: *working_directory
          <<: *branch_filters
          requires:
            - prepare_workspace
      - lerna_version_prerelease:
          name: lerna_version_prerelease
          requires:
            - root_node_install_deps
            - storybook_yarn_build
            - react_yarn_build
            - web_yarn_lint
          display_name: 'lerna_version_prerelease_version'
          <<: *branch_filters
          working_directory: *working_directory
      - deploy:
          context: npm
          requires:
            - lerna_version_prerelease
          <<: *branch_filters
