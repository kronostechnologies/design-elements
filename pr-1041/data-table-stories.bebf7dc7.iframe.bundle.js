"use strict";(self.webpackChunk_equisoft_design_elements_storybook=self.webpackChunk_equisoft_design_elements_storybook||[]).push([[4004],{"./stories/data-table.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomColumns:()=>CustomColumns,CustomTextAlignment:()=>CustomTextAlignment,Default:()=>Default,ErrorRows:()=>ErrorRows,ExpandableSubContent:()=>ExpandableSubContent,ExpandableSubrowsMultiple:()=>ExpandableSubrowsMultiple,ExpandableSubrowsSingle:()=>ExpandableSubrowsSingle,GroupedHeaders:()=>GroupedHeaders,Grouping:()=>Grouping,HeaderAriaLabel:()=>HeaderAriaLabel,LargeRows:()=>LargeRows,MultipleSelectableExpandableSubRows:()=>MultipleSelectableExpandableSubRows,MultipleSelectableRows:()=>MultipleSelectableRows,Optimization:()=>Optimization,RowClickCallback:()=>RowClickCallback,RowNumbers:()=>RowNumbers,SingleSelectableRows:()=>SingleSelectableRows,SmallRows:()=>SmallRows,SortableRows:()=>SortableRows,Sticky:()=>Sticky,StickyFooter:()=>StickyFooter,StickyHeaderAndFooter:()=>StickyHeaderAndFooter,Striped:()=>Striped,TableWithPagination:()=>TableWithPagination,WithBackgroundColor:()=>WithBackgroundColor,WithColumnClassnames:()=>WithColumnClassnames,WithFooter:()=>WithFooter,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../../../../.yarn/berry/cache/react-npm-17.0.2-99ba37d931-10c0.zip/node_modules/react/index.js"),_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../.yarn/__virtual__/@equisoft-design-elements-react-virtual-0c2f823c14/1/packages/react/dist/bundle.js"),styled_components__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../.yarn/__virtual__/styled-components-virtual-0e8c327dd2/4/.yarn/berry/cache/styled-components-npm-5.3.11-d45616b9af-10c0.zip/node_modules/styled-components/dist/styled-components.browser.esm.js"),_utils_parameters__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/utils/parameters.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../../../../.yarn/berry/cache/react-npm-17.0.2-99ba37d931-10c0.zip/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Data Table",component:_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,parameters:_utils_parameters__WEBPACK_IMPORTED_MODULE_2__.A},Default={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{...args,columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"a",column2:"a",column3:"a"}]})},StyledTable=(0,styled_components__WEBPACK_IMPORTED_MODULE_4__.default)((({className,columns,data})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{className,columns,data})))`
    .column-1 {
        box-sizing: border-box;
        width: 150px;
    }

    .column-2 {
        box-sizing: border-box;
        width: 300px;
    }
`,WithColumnClassnames={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(StyledTable,{columns:[{header:"Column 1",accessorKey:"column1",className:"column-1"},{header:"Column 2",accessorKey:"column2",className:"column-2"},{header:"Column 3",accessorKey:"column3",className:"column-3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"a",column2:"a",column3:"a"}]})},WithFooter={render(){const data=[{column1:"a",column2:"a",numbers:10},{column1:"b",column2:"b",numbers:20},{column1:"a",column2:"a",numbers:30}],columns=[{header:"Column 1",accessorKey:"column1",footer:"Footer with colspan",footerColSpan:2},{header:"Column 2",accessorKey:"column2",footerColSpan:0},{header:"Numbers",accessorKey:"numbers",footer:()=>{const total=data.reduce(((sum,row)=>row.numbers+sum),0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("span",{children:["Total:",total]})}}];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns,data})}},ErrorRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b",error:!0},{column1:"c",column2:"c",column3:"c",error:!0}]})},Striped={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{striped:!0,columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"c",column2:"c",column3:"c"}]})},RowNumbers={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{rowNumbers:!0,columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"a",column2:"a",column3:"a"}]})},SmallRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{rowSize:"small",columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"a",column2:"a",column3:"a"}]})},LargeRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{rowSize:"large",columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"},{column1:"a",column2:"a",column3:"a"}]})},RowClickCallback={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:"a",href:"/row1"},{column1:"b",column2:"b",column3:"b",href:"/row2"}],onRowClick:row=>{console.info("row: ",row),console.info("href: ",row.original.href)}})},CustomTextAlignment={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2",textAlign:"center"},{header:"Column 3",accessorKey:"column3",textAlign:"right"}],data:[{column1:"Hello",column2:"World",column3:"Hello"},{column1:"Hello",column2:"World",column3:"Hello"}]})},CategoryCell=({cellValue})=>{const{value,tooltip}=cellValue;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{display:"flex"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{style:{marginRight:"var(--spacing-half)"},children:value}),tooltip&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Tooltip,{label:tooltip})]})},AmountHeader=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{textAlign:"right"},children:"Amount ($)"}),AmountCell=({cellValue})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{textAlign:"right"},children:cellValue}),CustomColumns={render(){const columns=[{header:"Category",accessorKey:"category",cell:props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(CategoryCell,{cellValue:props.cell.getValue()})},{header:AmountHeader,accessorKey:"amount",cell:props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(AmountCell,{cellValue:props.cell.getValue()})}];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns,data:[{category:{value:"Safety fund",tooltip:"Money for emergencies"},amount:"2000$"},{category:{value:"Investments"},amount:"12000$"}]})}},SortableRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2",sortable:!0},{header:"Column 3",accessorKey:"column3",sortable:!0},{header:"Custom sort by length",accessorKey:"column4",sortable:!0,sortingFn:(rowA,rowB)=>{const a=rowA.original.column4,b=rowB.original.column4;return a.length===b.length?0:a.length>b.length?1:-1}}],data:[{column1:"a",column2:"a",column3:10,column4:"short"},{column1:"b",column2:"b",column3:20,column4:"loooooong"}],defaultSort:{id:"column2",desc:!1}})},MultipleSelectableRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{rowSelectionMode:"multiple",columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:10},{column1:"b",column2:"b",column3:20}],onSelectedRowsChange:console.info})},MultipleSelectableExpandableSubRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{expandableRows:"multiple",rowSelectionMode:"multiple",columns:[{header:"ID",accessorKey:"id"},{header:"Name",accessorKey:"name"}],data:[{id:"1",name:"AAA",subRows:[{id:"1.A",name:"AAA-1"},{id:"1.B",name:"AAA-2"}]},{id:"2",name:"BBB",subRows:[{id:"2.A",name:"BBB-1"},{id:"2.B",name:"BBB-2"}]}],onSelectedRowsChange:console.info,expandChildsOnRowSelection:!0})},SingleSelectableRows={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{rowSelectionMode:"single",columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"},{header:"Column 3",accessorKey:"column3"}],data:[{column1:"a",column2:"a",column3:10},{column1:"b",column2:"b",column3:20}],onSelectedRowsChange:console.info,ariaLabelledByColumnId:"column2"})},ExpandableSubrowsMultiple={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"ID",accessorKey:"id"},{header:"Name",accessorKey:"name"}],data:[{id:"1",name:"AAA",subRows:[{id:"1.A",name:"AAA-1"},{id:"1.B",name:"AAA-2"}]},{id:"2",name:"BBB",subRows:[{id:"2.A",name:"BBB-1"},{id:"2.B",name:"BBB-2"}]}],expandableRows:"multiple"})},ExpandableSubrowsSingle={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"ID",accessorKey:"id"},{header:"Name",accessorKey:"name"}],data:[{id:"1",name:"AAA",subRows:[{id:"1.1",name:"AAA-1"},{id:"1.2",name:"AAA-2"}]},{id:"2",name:"BBB",subRows:[{id:"2.1",name:"BBB-1"},{id:"2.2",name:"BBB-2"}]}],expandableRows:"single"})},ExpandableSubContent={render(){const data=[{id:"1",name:"AAA",subContent:"Sub content in plain text"},{id:"2",name:"BBB",subContent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:["Sub content with HTML",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("br",{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("b",{children:"BBB"})]})}];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"ID",accessorKey:"id"},{header:"Name",accessorKey:"name"}],data,expandableRows:"single"})}},Grouping={args:{expandableRows:"multiple"},render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{...args,columns:[{header:"Name",accessorKey:"name",sortable:!0},{header:"ID",accessorKey:"id",sortable:!0}],data:[{id:"",name:"Group A",subRows:[{id:"1.A",name:"AAA-1"},{id:"1.B",name:"AAA-2"}]},{id:"",name:"Group C",subRows:[{id:"3.A",name:"CCC-1"},{id:"3.B",name:"CCC-2"}]},{id:"",name:"Group B",subRows:[{id:"2.A",name:"BBB-1"},{id:"2.B",name:"BBB-2"}]}],rowSelectionMode:"multiple"})},ScrollableWrap=styled_components__WEBPACK_IMPORTED_MODULE_4__.default.div`
    max-height: 400px;
    overflow: auto;
`,Sticky={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollableWrap,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1",sticky:!0},{header:"Column 2",accessorKey:"column2",sticky:!0},{header:"Column 3",accessorKey:"column3"},{header:"Column 4",accessorKey:"column4"},{header:"Column 5",accessorKey:"column5"},{header:"Column 6",accessorKey:"column6"},{header:"Column 7",accessorKey:"column7"},{header:"Column 8",accessorKey:"column8"},{header:"Column 9",accessorKey:"column9"},{header:"Column 10",accessorKey:"column10"},{header:"Column 11",accessorKey:"column11"},{header:"Column 12",accessorKey:"column12"},{header:"Column 13",accessorKey:"column13"},{header:"Column 14",accessorKey:"column14"},{header:"Column 15",accessorKey:"column15"}],data:[{column1:"a",column2:"a",column3:"a",column4:"a",column5:"a",column6:"a",column7:"a",column8:"a",column9:"a",column10:"a",column11:"a",column12:"a",column13:"a",column14:"a",column15:"a"},{column1:"b",column2:"b",column3:"b",column4:"b",column5:"b",column6:"b",column7:"b",column8:"b",column9:"b",column10:"b",column11:"b",column12:"b",column13:"b",column14:"b",column15:"b"},{column1:"c",column2:"c",column3:"c",column4:"c",column5:"c",column6:"c",column7:"c",column8:"c",column9:"c",column10:"c",column11:"c",column12:"c",column13:"c",column14:"c",column15:"c",error:!0},{column1:"d",column2:"d",column3:"d",column4:"d",column5:"d",column6:"d",column7:"d",column8:"d",column9:"d",column10:"d",column11:"d",column12:"d",column13:"d",column14:"d",column15:"d"},{column1:"e",column2:"e",column3:"e",column4:"e",column5:"e",column6:"e",column7:"e",column8:"e",column9:"e",column10:"e",column11:"e",column12:"e",column13:"e",column14:"e",column15:"e"},{column1:"f",column2:"f",column3:"f",column4:"f",column5:"f",column6:"f",column7:"f",column8:"f",column9:"f",column10:"f",column11:"f",column12:"f",column13:"f",column14:"f",column15:"f"},{column1:"g",column2:"g",column3:"g",column4:"g",column5:"g",column6:"g",column7:"g",column8:"g",column9:"g",column10:"g",column11:"g",column12:"g",column13:"g",column14:"g",column15:"g"},{column1:"h",column2:"h",column3:"h",column4:"h",column5:"h",column6:"h",column7:"h",column8:"h",column9:"h",column10:"h",column11:"h",column12:"h",column13:"h",column14:"h",column15:"h"},{column1:"i",column2:"i",column3:"i",column4:"i",column5:"i",column6:"i",column7:"i",column8:"i",column9:"i",column10:"i",column11:"i",column12:"i",column13:"i",column14:"i",column15:"i"}],stickyHeader:!0,onRowClick:row=>console.info("row: ",row)})})},StickyFooter={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollableWrap,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1",footer:"Footer 1"},{header:"Column 2",accessorKey:"column2",footer:"Footer 2"},{header:"Column 3",accessorKey:"column3",footer:"Footer 3"},{header:"Column 4",accessorKey:"column4",footer:"Footer 4"}],data:[{column1:"a",column2:"a",column3:"a",column4:"a"},{column1:"b",column2:"b",column3:"b",column4:"b"},{column1:"c",column2:"c",column3:"c",column4:"c"},{column1:"d",column2:"d",column3:"d",column4:"d"},{column1:"e",column2:"e",column3:"e",column4:"e"},{column1:"f",column2:"f",column3:"f",column4:"f"},{column1:"g",column2:"g",column3:"g",column4:"g"},{column1:"h",column2:"h",column3:"h",column4:"h"},{column1:"i",column2:"i",column3:"i",column4:"i"}],stickyFooter:!0,onRowClick:row=>console.info("row: ",row)})})},StickyHeaderAndFooter={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollableWrap,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column 1",accessorKey:"column1",footer:"Footer 1"},{header:"Column 2",accessorKey:"column2",footer:"Footer 2"},{header:"Column 3",accessorKey:"column3",footer:"Footer 3"},{header:"Column 4",accessorKey:"column4",footer:"Footer 4"}],data:[{column1:"a",column2:"a",column3:"a",column4:"a"},{column1:"b",column2:"b",column3:"b",column4:"b"},{column1:"c",column2:"c",column3:"c",column4:"c"},{column1:"d",column2:"d",column3:"d",column4:"d"},{column1:"e",column2:"e",column3:"e",column4:"e"},{column1:"f",column2:"f",column3:"f",column4:"f"},{column1:"g",column2:"g",column3:"g",column4:"g"},{column1:"h",column2:"h",column3:"h",column4:"h"},{column1:"i",column2:"i",column3:"i",column4:"i"}],stickyHeader:!0,stickyFooter:!0,onRowClick:row=>console.info("row: ",row)})})},StyledTableWithBackground=(0,styled_components__WEBPACK_IMPORTED_MODULE_4__.default)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table)`
    background: #a9cad8;
`,WithBackgroundColor={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollableWrap,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(StyledTableWithBackground,{rowSelectionMode:"multiple",stickyHeader:!0,stickyFooter:!0,columns:[{header:"Column 1",accessorKey:"column1",footer:"Footer 1"},{header:"Column 2",accessorKey:"column2",footer:"Footer 2"},{header:"Column 3",accessorKey:"column3",footer:"Footer 3"},{header:"Column 4",accessorKey:"column4",footer:"Footer 4"}],data:[{column1:"a",column2:"a",column3:"a",column4:"a"},{column1:"b",column2:"b",column3:"b",column4:"b"},{column1:"c",column2:"c",column3:"c",column4:"c"},{column1:"d",column2:"d",column3:"d",column4:"d"},{column1:"e",column2:"e",column3:"e",column4:"e"},{column1:"f",column2:"f",column3:"f",column4:"f"},{column1:"g",column2:"g",column3:"g",column4:"g"},{column1:"h",column2:"h",column3:"h",column4:"h"},{column1:"i",column2:"i",column3:"i",column4:"i"}],onSelectedRowsChange:console.info})})},HeaderAriaLabel={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Column with text",accessorKey:"column1",headerAriaLabel:""},{header:"",accessorKey:"column2",headerAriaLabel:"Column 2 aria label"},{header:"Column 3 with text",accessorKey:"column3",headerAriaLabel:""}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"}]})},GroupedHeaders={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns:[{header:"Group 1",columns:[{header:"Column 1",accessorKey:"column1"},{header:"Column 2",accessorKey:"column2"}]},{header:"Group 2",columns:[{header:"Column 3",accessorKey:"column3"}]}],data:[{column1:"a",column2:"a",column3:"a"},{column1:"b",column2:"b",column3:"b"}]})},Optimization={render(){const[data,setData]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([{id:1,name:"Jennifer",country:"Canada"},{id:2,name:"William",country:"USA"}]),[allowEditing,setAllowEditing]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),allowEditingRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();allowEditingRef.current=allowEditing;const columns=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>[{header:"ID",accessorKey:"id"},{header:"Name",accessorKey:"name",cell:({row})=>allowEditingRef.current?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.TextInput,{noMargin:!0,value:row.original.name,onChange:event=>{setData((prev=>prev.map((d=>d.id===row.original.id?{...d,name:event.target.value}:d))))}}):row.original.name},{header:"Country",accessorKey:"country"}]),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"When the component is re-rendering, it will always update the table with the provided data and columns, even when you pass the same data and columns. But the very important key here is if you pass a different **columns** object between renders, the table will UNMOUNT and RE-MOUNT every cell instead of doing the usual React update. This will impact the performance and could create unwanted behaviors. To prevent this, you should give the column definitions a stable identity by memoizing it (ex: store it in a useMemo or useState hook)."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{style:{marginBottom:"2rem"},children:"Additionally, if your columns use some dependencies, you can pass them via useRef instead, so you don't have to recreate the columns object everytime the dependencies changes."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Button,{type:"button",buttonType:"secondary",onClick:()=>setAllowEditing(!allowEditing),children:"Toggle Editable"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns,data})]})}};const TableWithPagination={render(){const[data,setData]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function makeData(){const countries=["Canada","United States","France","Germany","Italy","Spain","Portugal","Japan"];return[...Array(35).keys()].map((i=>({id:i+1,age:Math.floor(90*Math.random())+10,country:countries[Math.floor(Math.random()*countries.length)]})))}()),[currentPage,setCurrentPage]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1),columns=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>[{header:"ID",accessorKey:"id",sortable:!0,sortDescFirst:!1},{header:"Age",accessorKey:"age",sortable:!0},{header:"Country",accessorKey:"country",sortable:!0}]),[]),currentPageData=data.slice(10*(currentPage-1),10*currentPage);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Table,{columns,data:currentPageData,defaultSort:{id:"id",desc:!1},onSort:sort=>{if(sort){const key=sort.id;setData([...data].sort(((a,b)=>function sortFn(a,b,isDescending=!1){let compareValue=0;return"string"==typeof a?compareValue=a.localeCompare(b,"en",{sensitivity:"base"}):"number"==typeof a&&(compareValue=a-b),isDescending?-1*compareValue:compareValue}(a[key],b[key],sort.desc))))}},manualSort:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_equisoft_design_elements_react__WEBPACK_IMPORTED_MODULE_1__.Pagination,{resultsPerPage:10,numberOfResults:data.length,activePage:currentPage,onPageChange:page=>setCurrentPage(page),pagesShown:5})]})}},__namedExportsOrder=["Default","WithColumnClassnames","WithFooter","ErrorRows","Striped","RowNumbers","SmallRows","LargeRows","RowClickCallback","CustomTextAlignment","CustomColumns","SortableRows","MultipleSelectableRows","MultipleSelectableExpandableSubRows","SingleSelectableRows","ExpandableSubrowsMultiple","ExpandableSubrowsSingle","ExpandableSubContent","Grouping","Sticky","StickyFooter","StickyHeaderAndFooter","WithBackgroundColor","HeaderAriaLabel","GroupedHeaders","Optimization","TableWithPagination"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render(args) {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }];\n    return <Table\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    {...args as TableProps<Data>} columns={columns} data={data} />;\n  }\n}",...Default.parameters?.docs?.source}}},WithColumnClassnames.parameters={...WithColumnClassnames.parameters,docs:{...WithColumnClassnames.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      className: 'column-1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      className: 'column-2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      className: 'column-3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }];\n    return <StyledTable columns={columns} data={data} />;\n  }\n}",...WithColumnClassnames.parameters?.docs?.source}}},WithFooter.parameters={...WithFooter.parameters,docs:{...WithFooter.parameters?.docs,source:{originalSource:"{\n  render() {\n    const data: TableData<FooterData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      numbers: 10\n    }, {\n      column1: 'b',\n      column2: 'b',\n      numbers: 20\n    }, {\n      column1: 'a',\n      column2: 'a',\n      numbers: 30\n    }];\n\n    // Footer function for the 'numbers' column\n    const footerSum = (): ReactElement => {\n      const total = (data as FooterData[]).reduce((sum, row) => row.numbers + sum, 0);\n      return <span>\n                    Total:\n                    {total}\n                </span>;\n    };\n\n    // Calculate the total sum of 'numbers'\n    const columns: TableColumn<FooterData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      footer: 'Footer with colspan',\n      footerColSpan: 2\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      footerColSpan: 0\n    }, {\n      header: 'Numbers',\n      accessorKey: 'numbers',\n      footer: footerSum\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...WithFooter.parameters?.docs?.source}}},ErrorRows.parameters={...ErrorRows.parameters,docs:{...ErrorRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      error: true\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c',\n      error: true\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...ErrorRows.parameters?.docs?.source}}},Striped.parameters={...Striped.parameters,docs:{...Striped.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c'\n    }];\n    return <Table striped columns={columns} data={data} />;\n  }\n}",...Striped.parameters?.docs?.source}}},RowNumbers.parameters={...RowNumbers.parameters,docs:{...RowNumbers.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }];\n    return <Table rowNumbers columns={columns} data={data} />;\n  }\n}",...RowNumbers.parameters?.docs?.source}}},SmallRows.parameters={...SmallRows.parameters,docs:{...SmallRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }];\n    return <Table rowSize=\"small\" columns={columns} data={data} />;\n  }\n}",...SmallRows.parameters?.docs?.source}}},LargeRows.parameters={...LargeRows.parameters,docs:{...LargeRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }, {\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }];\n    return <Table rowSize=\"large\" columns={columns} data={data} />;\n  }\n}",...LargeRows.parameters?.docs?.source}}},RowClickCallback.parameters={...RowClickCallback.parameters,docs:{...RowClickCallback.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface DataWithHref {\n      column1: string;\n      column2: string;\n      column3: string;\n      href: string;\n    }\n    const columns: TableColumn<DataWithHref>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<DataWithHref>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a',\n      href: '/row1'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      href: '/row2'\n    }];\n    return <Table columns={columns} data={data} onRowClick={row => {\n      console.info('row: ', row);\n      console.info('href: ', (row.original as DataWithHref).href);\n    }} />;\n  }\n}",...RowClickCallback.parameters?.docs?.source}}},CustomTextAlignment.parameters={...CustomTextAlignment.parameters,docs:{...CustomTextAlignment.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      textAlign: 'center'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      textAlign: 'right'\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'Hello',\n      column2: 'World',\n      column3: 'Hello'\n    }, {\n      column1: 'Hello',\n      column2: 'World',\n      column3: 'Hello'\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...CustomTextAlignment.parameters?.docs?.source}}},CustomColumns.parameters={...CustomColumns.parameters,docs:{...CustomColumns.parameters?.docs,source:{originalSource:"{\n  render() {\n    const data: TableData<ComplexData>[] = [{\n      category: {\n        value: 'Safety fund',\n        tooltip: 'Money for emergencies'\n      },\n      amount: '2000$'\n    }, {\n      category: {\n        value: 'Investments'\n      },\n      amount: '12000$'\n    }];\n    const columns: TableColumn<ComplexData>[] = [{\n      header: 'Category',\n      accessorKey: 'category',\n      // eslint-disable-next-line react/no-unstable-nested-components\n      cell: props => <CategoryCell cellValue={props.cell.getValue() as ComplexData['category']} />\n    }, {\n      header: AmountHeader,\n      accessorKey: 'amount',\n      // eslint-disable-next-line react/no-unstable-nested-components\n      cell: props => <AmountCell cellValue={props.cell.getValue() as ComplexData['amount']} />\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...CustomColumns.parameters?.docs?.source}}},SortableRows.parameters={...SortableRows.parameters,docs:{...SortableRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface SortableData {\n      column1: string;\n      column2: string;\n      column3: number;\n      column4: string;\n    }\n    const columns: TableColumn<SortableData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      sortable: true\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      sortable: true\n    }, {\n      header: 'Custom sort by length',\n      accessorKey: 'column4',\n      sortable: true,\n      sortingFn: (rowA, rowB) => {\n        const a = rowA.original.column4;\n        const b = rowB.original.column4;\n        if (a.length === b.length) {\n          return 0;\n        }\n        return a.length > b.length ? 1 : -1;\n      }\n    }];\n    const data: TableData<SortableData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 10,\n      column4: 'short'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 20,\n      column4: 'loooooong'\n    }];\n    return <Table columns={columns} data={data} defaultSort={{\n      id: 'column2',\n      desc: false\n    }} />;\n  }\n}",...SortableRows.parameters?.docs?.source}}},MultipleSelectableRows.parameters={...MultipleSelectableRows.parameters,docs:{...MultipleSelectableRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface SelectableData {\n      column1: string;\n      column2: string;\n      column3: number;\n    }\n    const columns: TableColumn<SelectableData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<SelectableData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 10\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 20\n    }];\n    return <Table rowSelectionMode=\"multiple\" columns={columns} data={data} onSelectedRowsChange={console.info} />;\n  }\n}",...MultipleSelectableRows.parameters?.docs?.source}}},MultipleSelectableExpandableSubRows.parameters={...MultipleSelectableExpandableSubRows.parameters,docs:{...MultipleSelectableExpandableSubRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface ExpandableData {\n      id: string;\n      name: string;\n    }\n    const columns: TableColumn<ExpandableData>[] = [{\n      header: 'ID',\n      accessorKey: 'id'\n    }, {\n      header: 'Name',\n      accessorKey: 'name'\n    }];\n    const data: TableData<ExpandableData>[] = [{\n      id: '1',\n      name: 'AAA',\n      subRows: [{\n        id: '1.A',\n        name: 'AAA-1'\n      }, {\n        id: '1.B',\n        name: 'AAA-2'\n      }]\n    }, {\n      id: '2',\n      name: 'BBB',\n      subRows: [{\n        id: '2.A',\n        name: 'BBB-1'\n      }, {\n        id: '2.B',\n        name: 'BBB-2'\n      }]\n    }];\n    return <Table expandableRows=\"multiple\" rowSelectionMode=\"multiple\" columns={columns} data={data} onSelectedRowsChange={console.info} expandChildsOnRowSelection />;\n  }\n}",...MultipleSelectableExpandableSubRows.parameters?.docs?.source}}},SingleSelectableRows.parameters={...SingleSelectableRows.parameters,docs:{...SingleSelectableRows.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface SelectableData {\n      column1: string;\n      column2: string;\n      column3: number;\n    }\n    const columns: TableColumn<SelectableData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }];\n    const data: TableData<SelectableData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 10\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 20\n    }];\n    return <Table rowSelectionMode=\"single\" columns={columns} data={data} onSelectedRowsChange={console.info} ariaLabelledByColumnId=\"column2\" />;\n  }\n}",...SingleSelectableRows.parameters?.docs?.source}}},ExpandableSubrowsMultiple.parameters={...ExpandableSubrowsMultiple.parameters,docs:{...ExpandableSubrowsMultiple.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface ExpandableData {\n      id: string;\n      name: string;\n    }\n    const columns: TableColumn<ExpandableData>[] = [{\n      header: 'ID',\n      accessorKey: 'id'\n    }, {\n      header: 'Name',\n      accessorKey: 'name'\n    }];\n    const data: TableData<ExpandableData>[] = [{\n      id: '1',\n      name: 'AAA',\n      subRows: [{\n        id: '1.A',\n        name: 'AAA-1'\n      }, {\n        id: '1.B',\n        name: 'AAA-2'\n      }]\n    }, {\n      id: '2',\n      name: 'BBB',\n      subRows: [{\n        id: '2.A',\n        name: 'BBB-1'\n      }, {\n        id: '2.B',\n        name: 'BBB-2'\n      }]\n    }];\n    return <Table columns={columns} data={data} expandableRows='multiple' />;\n  }\n}",...ExpandableSubrowsMultiple.parameters?.docs?.source}}},ExpandableSubrowsSingle.parameters={...ExpandableSubrowsSingle.parameters,docs:{...ExpandableSubrowsSingle.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface ExpandableData {\n      id: string;\n      name: string;\n    }\n    const columns: TableColumn<ExpandableData>[] = [{\n      header: 'ID',\n      accessorKey: 'id'\n    }, {\n      header: 'Name',\n      accessorKey: 'name'\n    }];\n    const data: TableData<ExpandableData>[] = [{\n      id: '1',\n      name: 'AAA',\n      subRows: [{\n        id: '1.1',\n        name: 'AAA-1'\n      }, {\n        id: '1.2',\n        name: 'AAA-2'\n      }]\n    }, {\n      id: '2',\n      name: 'BBB',\n      subRows: [{\n        id: '2.1',\n        name: 'BBB-1'\n      }, {\n        id: '2.2',\n        name: 'BBB-2'\n      }]\n    }];\n    return <Table columns={columns} data={data} expandableRows='single' />;\n  }\n}",...ExpandableSubrowsSingle.parameters?.docs?.source}}},ExpandableSubContent.parameters={...ExpandableSubContent.parameters,docs:{...ExpandableSubContent.parameters?.docs,source:{originalSource:"{\n  render() {\n    interface ExpandableData {\n      id: string;\n      name: string;\n    }\n    const columns: TableColumn<ExpandableData>[] = [{\n      header: 'ID',\n      accessorKey: 'id'\n    }, {\n      header: 'Name',\n      accessorKey: 'name'\n    }];\n    const data: TableData<ExpandableData>[] = [{\n      id: '1',\n      name: 'AAA',\n      subContent: 'Sub content in plain text'\n    }, {\n      id: '2',\n      name: 'BBB',\n      subContent: <>\n                        Sub content with HTML\n                        <br />\n                        <b>BBB</b>\n                    </>\n    }];\n    return <Table columns={columns} data={data} expandableRows='single' />;\n  }\n}",...ExpandableSubContent.parameters?.docs?.source}}},Grouping.parameters={...Grouping.parameters,docs:{...Grouping.parameters?.docs,source:{originalSource:"{\n  args: {\n    expandableRows: 'multiple'\n  },\n  render(args): ReactElement {\n    interface GroupingData {\n      id: string;\n      name: string;\n    }\n    const columns: TableColumn<GroupingData>[] = [{\n      header: 'Name',\n      accessorKey: 'name',\n      sortable: true\n    }, {\n      header: 'ID',\n      accessorKey: 'id',\n      sortable: true\n    }];\n    const data: TableData<GroupingData>[] = [{\n      id: '',\n      name: 'Group A',\n      subRows: [{\n        id: '1.A',\n        name: 'AAA-1'\n      }, {\n        id: '1.B',\n        name: 'AAA-2'\n      }]\n    }, {\n      id: '',\n      name: 'Group C',\n      subRows: [{\n        id: '3.A',\n        name: 'CCC-1'\n      }, {\n        id: '3.B',\n        name: 'CCC-2'\n      }]\n    }, {\n      id: '',\n      name: 'Group B',\n      subRows: [{\n        id: '2.A',\n        name: 'BBB-1'\n      }, {\n        id: '2.B',\n        name: 'BBB-2'\n      }]\n    }];\n    return <Table\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    {...args as TableProps<GroupingData>} columns={columns} data={data} rowSelectionMode='multiple' />;\n  }\n}",...Grouping.parameters?.docs?.source}}},Sticky.parameters={...Sticky.parameters,docs:{...Sticky.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<StickyData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      sticky: true\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      sticky: true\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3'\n    }, {\n      header: 'Column 4',\n      accessorKey: 'column4'\n    }, {\n      header: 'Column 5',\n      accessorKey: 'column5'\n    }, {\n      header: 'Column 6',\n      accessorKey: 'column6'\n    }, {\n      header: 'Column 7',\n      accessorKey: 'column7'\n    }, {\n      header: 'Column 8',\n      accessorKey: 'column8'\n    }, {\n      header: 'Column 9',\n      accessorKey: 'column9'\n    }, {\n      header: 'Column 10',\n      accessorKey: 'column10'\n    }, {\n      header: 'Column 11',\n      accessorKey: 'column11'\n    }, {\n      header: 'Column 12',\n      accessorKey: 'column12'\n    }, {\n      header: 'Column 13',\n      accessorKey: 'column13'\n    }, {\n      header: 'Column 14',\n      accessorKey: 'column14'\n    }, {\n      header: 'Column 15',\n      accessorKey: 'column15'\n    }];\n    const data: TableData<StickyData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a',\n      column4: 'a',\n      column5: 'a',\n      column6: 'a',\n      column7: 'a',\n      column8: 'a',\n      column9: 'a',\n      column10: 'a',\n      column11: 'a',\n      column12: 'a',\n      column13: 'a',\n      column14: 'a',\n      column15: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      column4: 'b',\n      column5: 'b',\n      column6: 'b',\n      column7: 'b',\n      column8: 'b',\n      column9: 'b',\n      column10: 'b',\n      column11: 'b',\n      column12: 'b',\n      column13: 'b',\n      column14: 'b',\n      column15: 'b'\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c',\n      column4: 'c',\n      column5: 'c',\n      column6: 'c',\n      column7: 'c',\n      column8: 'c',\n      column9: 'c',\n      column10: 'c',\n      column11: 'c',\n      column12: 'c',\n      column13: 'c',\n      column14: 'c',\n      column15: 'c',\n      error: true\n    }, {\n      column1: 'd',\n      column2: 'd',\n      column3: 'd',\n      column4: 'd',\n      column5: 'd',\n      column6: 'd',\n      column7: 'd',\n      column8: 'd',\n      column9: 'd',\n      column10: 'd',\n      column11: 'd',\n      column12: 'd',\n      column13: 'd',\n      column14: 'd',\n      column15: 'd'\n    }, {\n      column1: 'e',\n      column2: 'e',\n      column3: 'e',\n      column4: 'e',\n      column5: 'e',\n      column6: 'e',\n      column7: 'e',\n      column8: 'e',\n      column9: 'e',\n      column10: 'e',\n      column11: 'e',\n      column12: 'e',\n      column13: 'e',\n      column14: 'e',\n      column15: 'e'\n    }, {\n      column1: 'f',\n      column2: 'f',\n      column3: 'f',\n      column4: 'f',\n      column5: 'f',\n      column6: 'f',\n      column7: 'f',\n      column8: 'f',\n      column9: 'f',\n      column10: 'f',\n      column11: 'f',\n      column12: 'f',\n      column13: 'f',\n      column14: 'f',\n      column15: 'f'\n    }, {\n      column1: 'g',\n      column2: 'g',\n      column3: 'g',\n      column4: 'g',\n      column5: 'g',\n      column6: 'g',\n      column7: 'g',\n      column8: 'g',\n      column9: 'g',\n      column10: 'g',\n      column11: 'g',\n      column12: 'g',\n      column13: 'g',\n      column14: 'g',\n      column15: 'g'\n    }, {\n      column1: 'h',\n      column2: 'h',\n      column3: 'h',\n      column4: 'h',\n      column5: 'h',\n      column6: 'h',\n      column7: 'h',\n      column8: 'h',\n      column9: 'h',\n      column10: 'h',\n      column11: 'h',\n      column12: 'h',\n      column13: 'h',\n      column14: 'h',\n      column15: 'h'\n    }, {\n      column1: 'i',\n      column2: 'i',\n      column3: 'i',\n      column4: 'i',\n      column5: 'i',\n      column6: 'i',\n      column7: 'i',\n      column8: 'i',\n      column9: 'i',\n      column10: 'i',\n      column11: 'i',\n      column12: 'i',\n      column13: 'i',\n      column14: 'i',\n      column15: 'i'\n    }];\n    return <ScrollableWrap>\n                <Table columns={columns} data={data} stickyHeader onRowClick={row => console.info('row: ', row)} />\n            </ScrollableWrap>;\n  }\n}",...Sticky.parameters?.docs?.source}}},StickyFooter.parameters={...StickyFooter.parameters,docs:{...StickyFooter.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      footer: 'Footer 1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      footer: 'Footer 2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      footer: 'Footer 3'\n    }, {\n      header: 'Column 4',\n      accessorKey: 'column4',\n      footer: 'Footer 4'\n    }];\n    const data: TableData<StickyHeaderFooterData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a',\n      column4: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      column4: 'b'\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c',\n      column4: 'c'\n    }, {\n      column1: 'd',\n      column2: 'd',\n      column3: 'd',\n      column4: 'd'\n    }, {\n      column1: 'e',\n      column2: 'e',\n      column3: 'e',\n      column4: 'e'\n    }, {\n      column1: 'f',\n      column2: 'f',\n      column3: 'f',\n      column4: 'f'\n    }, {\n      column1: 'g',\n      column2: 'g',\n      column3: 'g',\n      column4: 'g'\n    }, {\n      column1: 'h',\n      column2: 'h',\n      column3: 'h',\n      column4: 'h'\n    }, {\n      column1: 'i',\n      column2: 'i',\n      column3: 'i',\n      column4: 'i'\n    }];\n    return <ScrollableWrap>\n                <Table columns={columns} data={data} stickyFooter onRowClick={row => console.info('row: ', row)} />\n            </ScrollableWrap>;\n  }\n}",...StickyFooter.parameters?.docs?.source}}},StickyHeaderAndFooter.parameters={...StickyHeaderAndFooter.parameters,docs:{...StickyHeaderAndFooter.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      footer: 'Footer 1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      footer: 'Footer 2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      footer: 'Footer 3'\n    }, {\n      header: 'Column 4',\n      accessorKey: 'column4',\n      footer: 'Footer 4'\n    }];\n    const data: TableData<StickyHeaderFooterData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a',\n      column4: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      column4: 'b'\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c',\n      column4: 'c'\n    }, {\n      column1: 'd',\n      column2: 'd',\n      column3: 'd',\n      column4: 'd'\n    }, {\n      column1: 'e',\n      column2: 'e',\n      column3: 'e',\n      column4: 'e'\n    }, {\n      column1: 'f',\n      column2: 'f',\n      column3: 'f',\n      column4: 'f'\n    }, {\n      column1: 'g',\n      column2: 'g',\n      column3: 'g',\n      column4: 'g'\n    }, {\n      column1: 'h',\n      column2: 'h',\n      column3: 'h',\n      column4: 'h'\n    }, {\n      column1: 'i',\n      column2: 'i',\n      column3: 'i',\n      column4: 'i'\n    }];\n    return <ScrollableWrap>\n                <Table columns={columns} data={data} stickyHeader stickyFooter onRowClick={row => console.info('row: ', row)} />\n            </ScrollableWrap>;\n  }\n}",...StickyHeaderAndFooter.parameters?.docs?.source}}},WithBackgroundColor.parameters={...WithBackgroundColor.parameters,docs:{...WithBackgroundColor.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<StickyHeaderFooterData>[] = [{\n      header: 'Column 1',\n      accessorKey: 'column1',\n      footer: 'Footer 1'\n    }, {\n      header: 'Column 2',\n      accessorKey: 'column2',\n      footer: 'Footer 2'\n    }, {\n      header: 'Column 3',\n      accessorKey: 'column3',\n      footer: 'Footer 3'\n    }, {\n      header: 'Column 4',\n      accessorKey: 'column4',\n      footer: 'Footer 4'\n    }];\n    const data: TableData<StickyHeaderFooterData>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a',\n      column4: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b',\n      column4: 'b'\n    }, {\n      column1: 'c',\n      column2: 'c',\n      column3: 'c',\n      column4: 'c'\n    }, {\n      column1: 'd',\n      column2: 'd',\n      column3: 'd',\n      column4: 'd'\n    }, {\n      column1: 'e',\n      column2: 'e',\n      column3: 'e',\n      column4: 'e'\n    }, {\n      column1: 'f',\n      column2: 'f',\n      column3: 'f',\n      column4: 'f'\n    }, {\n      column1: 'g',\n      column2: 'g',\n      column3: 'g',\n      column4: 'g'\n    }, {\n      column1: 'h',\n      column2: 'h',\n      column3: 'h',\n      column4: 'h'\n    }, {\n      column1: 'i',\n      column2: 'i',\n      column3: 'i',\n      column4: 'i'\n    }];\n    return <ScrollableWrap>\n                <StyledTableWithBackground rowSelectionMode=\"multiple\" stickyHeader stickyFooter columns={columns} data={data} onSelectedRowsChange={console.info} />\n            </ScrollableWrap>;\n  }\n}",...WithBackgroundColor.parameters?.docs?.source}}},HeaderAriaLabel.parameters={...HeaderAriaLabel.parameters,docs:{...HeaderAriaLabel.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Column with text',\n      accessorKey: 'column1',\n      headerAriaLabel: ''\n    }, {\n      header: '',\n      accessorKey: 'column2',\n      headerAriaLabel: 'Column 2 aria label'\n    }, {\n      header: 'Column 3 with text',\n      accessorKey: 'column3',\n      headerAriaLabel: ''\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...HeaderAriaLabel.parameters?.docs?.source}}},GroupedHeaders.parameters={...GroupedHeaders.parameters,docs:{...GroupedHeaders.parameters?.docs,source:{originalSource:"{\n  render() {\n    const columns: TableColumn<Data>[] = [{\n      header: 'Group 1',\n      columns: [{\n        header: 'Column 1',\n        accessorKey: 'column1'\n      }, {\n        header: 'Column 2',\n        accessorKey: 'column2'\n      }]\n    }, {\n      header: 'Group 2',\n      columns: [{\n        header: 'Column 3',\n        accessorKey: 'column3'\n      }]\n    }];\n    const data: TableData<Data>[] = [{\n      column1: 'a',\n      column2: 'a',\n      column3: 'a'\n    }, {\n      column1: 'b',\n      column2: 'b',\n      column3: 'b'\n    }];\n    return <Table columns={columns} data={data} />;\n  }\n}",...GroupedHeaders.parameters?.docs?.source}}},Optimization.parameters={...Optimization.parameters,docs:{...Optimization.parameters?.docs,source:{originalSource:"{\n  render() {\n    const [data, setData] = useState<OptimizationData[]>([{\n      id: 1,\n      name: 'Jennifer',\n      country: 'Canada'\n    }, {\n      id: 2,\n      name: 'William',\n      country: 'USA'\n    }]);\n    const [allowEditing, setAllowEditing] = useState<boolean>(true);\n    const allowEditingRef = useRef<boolean>();\n    allowEditingRef.current = allowEditing;\n    const columns: TableColumn<OptimizationData>[] = useMemo(() => [{\n      header: 'ID',\n      accessorKey: 'id'\n    }, {\n      header: 'Name',\n      accessorKey: 'name',\n      // eslint-disable-next-line react/no-unstable-nested-components\n      cell: ({\n        row\n      }) => allowEditingRef.current ? <TextInput noMargin value={row.original.name} onChange={event => {\n        setData(prev => prev.map(d => d.id === row.original.id ? {\n          ...d,\n          name: event.target.value\n        } : d));\n      }} /> : row.original.name\n    }, {\n      header: 'Country',\n      accessorKey: 'country'\n    }], []);\n    return <>\n                <p>\n                    When the component is re-rendering, it will always update the table with the provided data and\n                    columns, even when you pass the same data and columns. But the very important key here is if you\n                    pass a different **columns** object between renders, the table will UNMOUNT and RE-MOUNT every cell\n                    instead of doing the usual React update. This will impact the performance and could create unwanted\n                    behaviors. To prevent this, you should give the column definitions a stable identity by memoizing it\n                    (ex: store it in a useMemo or useState hook).\n                </p>\n                <p style={{\n        marginBottom: '2rem'\n      }}>\n                    Additionally, if your columns use some dependencies, you can pass them via useRef instead, so you\n                    don&apos;t have to recreate the columns object everytime the dependencies changes.\n                </p>\n                <p>\n                    <Button type=\"button\" buttonType='secondary' onClick={() => setAllowEditing(!allowEditing)}>\n                        Toggle Editable\n                    </Button>\n                </p>\n                <Table columns={columns} data={data} />\n            </>;\n  }\n}",...Optimization.parameters?.docs?.source}}},TableWithPagination.parameters={...TableWithPagination.parameters,docs:{...TableWithPagination.parameters?.docs,source:{originalSource:"{\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function sortFn(a: any, b: any, isDescending = false): number {\n      let compareValue = 0;\n      if (typeof a === 'string') {\n        compareValue = a.localeCompare(b, 'en', {\n          sensitivity: 'base'\n        });\n      } else if (typeof a === 'number') {\n        compareValue = a - b;\n      }\n      if (isDescending) {\n        return compareValue * -1;\n      }\n      return compareValue;\n    }\n    const ITEMS_PER_PAGE = 10;\n    const [data, setData] = useState<TableData<TablePaginationData>[]>(makeData());\n    const [currentPage, setCurrentPage] = useState(1);\n    const columns: TableColumn<TablePaginationData>[] = useMemo(() => [{\n      header: 'ID',\n      accessorKey: 'id',\n      sortable: true,\n      sortDescFirst: false\n    }, {\n      header: 'Age',\n      accessorKey: 'age',\n      sortable: true\n    }, {\n      header: 'Country',\n      accessorKey: 'country',\n      sortable: true\n    }], []);\n    const currentPageData = data.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);\n    return <>\n                <Table columns={columns} data={currentPageData} defaultSort={{\n        id: 'id',\n        desc: false\n      }} onSort={sort => {\n        if (sort) {\n          const key = sort.id as keyof TablePaginationData;\n          setData([...data].sort((a, b) => sortFn(a[key], b[key], sort.desc)));\n        }\n      }} manualSort />\n                <Pagination resultsPerPage={ITEMS_PER_PAGE} numberOfResults={data.length} activePage={currentPage} onPageChange={page => setCurrentPage(page)} pagesShown={5} />\n            </>;\n  }\n}",...TableWithPagination.parameters?.docs?.source}}}},"./stories/utils/parameters.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>rawCodeParameters});const rawCodeParameters={docs:{source:{type:"code"}}}}}]);
//# sourceMappingURL=data-table-stories.bebf7dc7.iframe.bundle.js.map