{"version":3,"file":"tabs-mdx.65da36e8.iframe.bundle.js","mappings":";;AAqCA","sources":["webpack://@equisoft/design-elements-storybook/./stories/tabs.stories.tsx"],"sourcesContent":["import { Card, Tab, Table, TableColumn, Tabs, TextArea } from '@equisoft/design-elements-react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport styled from 'styled-components';\nimport { useState } from 'react';\nimport { rawCodeParameters } from './utils/parameters';\n\nconst StyledDiv = styled.div`\n    padding: var(--spacing-2x);\n`;\n\ninterface Data {\n    column1: string;\n    column2: string;\n}\n\nconst contactTableColumns: TableColumn<Data>[] = [\n    {\n        header: 'First Name',\n        accessorKey: 'column1',\n    },\n    {\n        header: 'Last Name',\n        accessorKey: 'column2',\n    },\n];\n\nconst contactTableData: Data[] = [\n    {\n        column1: 'First Name 1',\n        column2: 'First Name 2',\n    },\n    {\n        column1: 'Last Name 1',\n        column2: 'Last Name 2',\n    },\n];\n\nconst tabs: Tab[] = [\n    {\n        id: 'tab1',\n        title: 'Contact',\n        panelContent: (\n            <StyledDiv>\n                <Table columns={contactTableColumns} data={contactTableData} />\n            </StyledDiv>\n        ),\n    },\n    {\n        id: 'tab2',\n        title: 'Calendar',\n        panelContent: (\n            <StyledDiv>\n                <Card>Monday : Doing something meaningful</Card>\n                <Card>Tuesday : Doing something else</Card>\n            </StyledDiv>\n        ),\n    },\n    {\n        id: 'tab3',\n        title: 'Note',\n        panelContent: (\n            <StyledDiv>\n                <TextArea label=\"Notes\" />\n            </StyledDiv>\n        ),\n    },\n];\n\nconst TabsMeta: Meta<typeof Tabs> = {\n    title: 'Components/Tabs',\n    component: Tabs,\n    parameters: rawCodeParameters,\n    argTypes: {\n        tabs: { control: { disable: true } },\n    },\n    render: (args) => (\n        <Tabs\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...args}\n            tabs={tabs}\n        />\n    ),\n};\n\nexport default TabsMeta;\ntype Story = StoryObj<typeof Tabs>;\n\nexport const Default: Story = {\n    ...TabsMeta,\n};\n\nexport const Global: Story = {\n    ...TabsMeta,\n    args: {\n        global: true,\n    },\n};\n\nlet addTabCounter = 3;\nexport const AddAndDeleteTabs: Story = {\n    ...TabsMeta,\n    render: () => {\n        const [currentTabs, setCurrentTabs] = useState<Tab[]>(tabs);\n\n        function handleRemove(tabId: string): void {\n            setCurrentTabs((prevTabs) => prevTabs.filter((tab) => tab.id !== tabId));\n        }\n\n        return (\n            <Tabs\n                tabs={currentTabs}\n                onRemove={handleRemove}\n                onAddTab={() => {\n                    addTabCounter += 1;\n                    setCurrentTabs([...currentTabs, {\n                        id: `tab${addTabCounter}`,\n                        title: 'New Tab',\n                        panelContent: <StyledDiv>New tab content</StyledDiv>,\n                    },\n                    ]);\n                }}\n            />\n        );\n    },\n};\n\nexport const Scrollable: Story = {\n    ...TabsMeta,\n    render: () => {\n        const customTabs: Tab[] = [...Array(15).keys()].map((i) => ({\n            id: `tab${i + 1}`,\n            title: `Tab ${i + 1}`,\n            panelContent: (\n                <StyledDiv>\n                    Content\n                    {i + 1}\n                </StyledDiv>\n            ),\n        }));\n\n        return (\n            <div style={{ maxWidth: '600px' }}>\n                <Tabs tabs={customTabs} />\n                <br />\n                <Tabs tabs={customTabs} global />\n            </div>\n        );\n    },\n};\n\nexport const WithForceRenderTabPanels: Story = {\n   ...TabsMeta,\n    args: {\n        forceRenderTabPanels: true,\n    },\n};\n\nexport const UnloadTabCallback: Story = {\n    ...TabsMeta,\n    render: () => {\n        const customTabs: Tab[] = [\n            {\n                id: 'tab1',\n                title: 'Tab that cannot change because onBeforeUnload resolves to false',\n                panelContent: <StyledDiv>First tab content</StyledDiv>,\n                onBeforeUnload: () => {\n                    console.info('cannot change tab because onBeforeUnload promise resolves to false here');\n                    return Promise.resolve(false);\n                },\n            },\n            {\n                id: 'tab2',\n                title: 'Second Button',\n                panelContent: <StyledDiv>Second tab content</StyledDiv>,\n                onBeforeUnload: () => Promise.resolve(true),\n            },\n            {\n                id: 'tab2',\n                title: 'Third Button',\n                panelContent: <StyledDiv>Third tab content</StyledDiv>,\n                onBeforeUnload: () => Promise.resolve(true),\n            },\n        ];\n\n        return (\n            <Tabs tabs={customTabs} />\n        );\n    },\n};\n\nexport const DefaultSelectedTab: Story = {\n    ...TabsMeta,\n    render: () => {\n        const customTabs: Tab[] = [\n            {\n                id: 'tab1',\n                title: 'First Button',\n                panelContent: <StyledDiv>First tab content</StyledDiv>,\n            },\n            {\n                id: 'tab2',\n                title: 'Second Button',\n                panelContent: <StyledDiv>Second tab content</StyledDiv>,\n            },\n            {\n                id: 'tab3',\n                title: 'Third Button',\n                panelContent: <StyledDiv>Third tab content</StyledDiv>,\n            },\n        ];\n\n        return (\n            <Tabs tabs={customTabs} defaultSelectedId='tab2' />\n        );\n    },\n};\n"],"names":[],"sourceRoot":""}