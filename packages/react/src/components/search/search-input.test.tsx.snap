// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchInput should match the snapshot 1`] = `
.c13 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: inherit;
  border: 1px solid;
  border-radius: 1.5rem;
  box-sizing: border-box;
  color: inherit;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-family: inherit;
  font-size: 0.75rem;
  font-weight: var(--font-bold);
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-letter-spacing: 0.025rem;
  -moz-letter-spacing: 0.025rem;
  -ms-letter-spacing: 0.025rem;
  letter-spacing: 0.025rem;
  line-height: 1rem;
  min-height: var(--size-2x);
  min-width: 2rem;
  outline: none;
  padding: 0 var(--spacing-2x);
  text-transform: uppercase;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c13:focus {
  outline: none;
}

.c13:focus {
  outline: none;
  border-color: #006296;
  box-shadow: 0 0 0 2px #84C6EA;
}

.c13:not(:disabled) {
  cursor: pointer;
}

.c13 > svg {
  color: inherit;
  height: var(--size-1x);
  width: var(--size-1x);
}

.c12 {
  background: #FFFFFF;
  border-color: #60666E;
  color: #60666E;
  height: 2rem;
  padding: 0 var(--spacing-1x);
  width: 2rem;
}

.c12:hover {
  background-color: #DBDEE1;
  color: #000000;
}

.c12:disabled,
.c12:disabled:focus,
.c12:disabled:hover {
  background-color: #F1F2F2;
  border-color: #DBDEE1;
  color: #B7BBC2;
}

.c14 {
  height: 16px;
  width: 16px;
}

.c3 {
  color: #000000;
  display: block;
  font-size: 0.75rem;
  font-weight: var(--font-normal);
  -webkit-letter-spacing: 0.02rem;
  -moz-letter-spacing: 0.02rem;
  -ms-letter-spacing: 0.02rem;
  letter-spacing: 0.02rem;
  line-height: 1.25rem;
  margin: 0;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

input + .c2 {
  margin-left: var(--spacing-half);
}

.c5 {
  border: 0 !important;
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px !important;
  overflow: hidden;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 label {
  bottom: 0.5rem;
  color: #60666E;
  display: inline-block;
  height: 1rem;
  left: 0.5rem;
  margin: auto;
  position: absolute;
  top: 0.5rem;
  width: 1rem;
}

.c1 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  position: relative;
  z-index: 1;
}

.c4 {
  color: #B7BBC2;
  height: 1rem;
  width: 1rem;
}

.c10 {
  color: #60666E;
  height: 1.25rem;
  margin: -1px;
  width: 1.25rem;
}

.c7 {
  background: #FFFFFF;
  border: 1px solid #60666E;
  border-radius: var(--border-radius);
  box-sizing: border-box;
  color: #000000;
  font-family: inherit;
  font-size: 0.875rem;
  -webkit-letter-spacing: 0.015rem;
  -moz-letter-spacing: 0.015rem;
  -ms-letter-spacing: 0.015rem;
  letter-spacing: 0.015rem;
  line-height: 1.5rem;
  margin: 0;
  min-height: var(--size-2x);
  outline: none;
  padding: 0 var(--spacing-1x);
  width: 100%;
  border-radius: var(--border-radius) 0 0 var(--border-radius);
  border-right: 0;
  height: 2rem;
  padding-bottom: var(--spacing-half);
  padding-left: 1.75rem;
  padding-right: 1.75rem;
  padding-top: var(--spacing-half);
}

.c7:focus {
  outline: none;
}

.c7:focus {
  outline: none;
  border-color: #006296;
  box-shadow: 0 0 0 2px #84C6EA;
}

.c7::-webkit-input-placeholder {
  color: #60666E;
}

.c7::-moz-placeholder {
  color: #60666E;
}

.c7:-ms-input-placeholder {
  color: #60666E;
}

.c7::placeholder {
  color: #60666E;
}

.c7:disabled {
  background-color: #F1F2F2;
  border-color: #DBDEE1;
}

.c7:disabled,
.c7:disabled::-webkit-input-placeholder {
  color: #B7BBC2;
}

.c7:disabled,
.c7:disabled::-moz-placeholder {
  color: #B7BBC2;
}

.c7:disabled,
.c7:disabled:-ms-input-placeholder {
  color: #B7BBC2;
}

.c7:disabled,
.c7:disabled::placeholder {
  color: #B7BBC2;
}

label + .c6 {
  margin-top: 0;
}

.c7::-webkit-search-decoration,
.c7::-webkit-search-cancel-button,
.c7::-webkit-search-results-button,
.c7::-webkit-search-results-decoration {
  display: none;
}

.c9 {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: transparent;
  border: 1px solid transparent;
  bottom: 0.5rem;
  cursor: pointer;
  display: none;
  height: 1.25rem;
  margin: auto;
  padding: 0;
  position: absolute;
  right: 0.25rem;
  top: 0.5rem;
  width: 1.25rem;
}

.c9:focus {
  outline: none;
}

.c9:focus {
  outline: none;
  box-shadow: 0 0 0 2px #84C6EA;
  box-shadow: 0 0 0 1px #006296,0 0 0 3px #84C6EA;
}

input:valid + .c8 {
  display: inline-block;
}

.c11 {
  border-radius: 0 var(--border-radius) var(--border-radius) 0;
  position: relative;
}

.c11:focus {
  z-index: 2;
}

<SearchInput
  disabled={true}
  hasButton={true}
  hasIcon={true}
  id="search-input"
  label="Search"
  onChange={[Function]}
  onReset={[Function]}
  onSearch={[Function]}
  placeholder="a placeholder"
  value="a value"
>
  <styled.div>
    <div
      className="c0"
    >
      <styled.div>
        <div
          className="c1"
        >
          <Label
            data-testid="search-icon"
            forId="search-input"
          >
            <styled.label
              htmlFor="search-input"
              isMobile={false}
            >
              <label
                className="c2 c3"
                htmlFor="search-input"
              >
                <styled.svg
                  disabled={true}
                >
                  <svg
                    className="c4"
                    disabled={true}
                  />
                </styled.svg>
                <VisuallyHidden>
                  <styled.span
                    aria-hidden="false"
                  >
                    <span
                      aria-hidden="false"
                      className="c5"
                    >
                      Search
                    </span>
                  </styled.span>
                </VisuallyHidden>
              </label>
            </styled.label>
          </Label>
          <styled.input
            autoComplete="on"
            data-testid="search-input"
            disabled={true}
            hasButton={true}
            hasIcon={true}
            hasReset={true}
            id="search-input"
            onChange={[Function]}
            onKeyDown={[Function]}
            placeholder="a placeholder"
            type="search"
            value="a value"
          >
            <input
              autoComplete="on"
              className="c6 c7"
              data-testid="search-input"
              disabled={true}
              id="search-input"
              onChange={[Function]}
              onKeyDown={[Function]}
              placeholder="a placeholder"
              type="search"
              value="a value"
            />
          </styled.input>
          <styled.button
            data-testid="search-reset"
            onClick={[Function]}
          >
            <button
              className="c8 c9"
              data-testid="search-reset"
              onClick={[Function]}
            >
              <styled.svg>
                <svg
                  className="c10"
                />
              </styled.svg>
              <VisuallyHidden>
                <styled.span
                  aria-hidden="false"
                >
                  <span
                    aria-hidden="false"
                    className="c5"
                  >
                    Reset
                  </span>
                </styled.span>
              </VisuallyHidden>
            </button>
          </styled.button>
        </div>
      </styled.div>
      <Styled(SearchButton)
        className="primary"
        data-testid="search-button"
        disabled={true}
        onClick={[Function]}
      >
        <SearchButton
          className="c11 primary"
          data-testid="search-button"
          disabled={true}
          onClick={[Function]}
        >
          <Styled(AbstractButton)
            className="c11 primary"
            disabled={true}
            isMobile={false}
            onClick={[Function]}
          >
            <AbstractButton
              className="c12 c11 primary"
              disabled={true}
              isMobile={false}
              onClick={[Function]}
            >
              <styled.button
                className="c12 c11 primary"
                disabled={true}
                isMobile={false}
                onClick={[Function]}
              >
                <button
                  className="c13 c12 c11 primary"
                  disabled={true}
                  onClick={[Function]}
                >
                  <Styled(Icon)>
                    <Icon
                      className="c14"
                      color="currentColor"
                      name="search"
                      size="24"
                    >
                      <svg
                        className="c14"
                        color="currentColor"
                        focusable={false}
                        height="24"
                        width="24"
                      />
                    </Icon>
                  </Styled(Icon)>
                </button>
              </styled.button>
            </AbstractButton>
          </Styled(AbstractButton)>
        </SearchButton>
      </Styled(SearchButton)>
    </div>
  </styled.div>
</SearchInput>
`;
