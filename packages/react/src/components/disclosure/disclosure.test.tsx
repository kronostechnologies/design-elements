import { shallow, mount } from 'enzyme';
import { useId } from '../../hooks/use-id';
import { Disclosure } from './disclosure';

jest.mock('../../hooks/use-id');

describe('Disclosure', () => {
    const content = 'content';
    const idContent = 'idContent';

    beforeEach(() => {
        jest.mocked(useId).mockReturnValue(idContent)
    });

    it('renders a button and a div', () => {
        const wrapper = shallow(<Disclosure>{content}</Disclosure>);
        expect(wrapper.find('button').exists()).toBe(true);
        expect(wrapper.find('div').exists()).toBe(true);
    });

    it('calls useId to generated content id', () => {
        const someId = 'someId';

        shallow(<Disclosure idContent={someId}>{content}</Disclosure>);

        expect(useId).toHaveBeenCalledWith(someId);
    });

    it('sets div content id to id generated by useId', () => {
        const wrapper = shallow(<Disclosure>{content}</Disclosure>);

        expect(wrapper.find('div').prop('id')).toBe(idContent);
    });

    it('sets button aria-controls to id generated by useId', () => {
        const wrapper = shallow(<Disclosure>{content}</Disclosure>);

        expect(wrapper.find('button').prop('aria-controls')).toBe(idContent);
    });

    it('toggles expanded state when button is clicked', () => {
        const wrapper = mount(<Disclosure>{content}</Disclosure>);
        const button = wrapper.find('button');

        expect(button.prop('aria-expanded')).toBe(false);
        button.simulate('click');

        expect(wrapper.find('button').prop('aria-expanded')).toBe(true);
        button.simulate('click');
        expect(wrapper.find('button').prop('aria-expanded')).toBe(false);
    });

    it('renders children correctly', () => {
        const childrenContent = <p>Test Content</p>;

        const wrapper = shallow(<Disclosure>{childrenContent}</Disclosure>);

        expect(wrapper.find('div').contains(childrenContent)).toBe(true);
    });
});
