import { shallow } from 'enzyme';
import { useId } from '../../hooks/use-id';
import { mountWithProviders } from '../../test-utils/renderer';
import { Button, ButtonProps } from '../buttons/button';
import { Disclosure } from './disclosure';

jest.mock('../../hooks/use-id');

type ButtonPropsWithoutOnClick = Omit<ButtonProps, 'onClick'>;

describe('Disclosure', () => {
    const content = 'content';
    const idContent = 'idContent';
    const buttonProps: ButtonPropsWithoutOnClick = {
        buttonType: 'primary',
        label: 'disclose content',
    };

    beforeEach(() => {
        jest.mocked(useId).mockReturnValue(idContent);
    });

    it('renders a button and a div', () => {
        const wrapper = mountWithProviders(<Disclosure buttonProps={buttonProps}>{content}</Disclosure>);

        expect(wrapper.find(Button).exists()).toBe(true);
        expect(wrapper.find('div').exists()).toBe(true);
    });

    it('calls useId to generated content id', () => {
        const someId = 'someId';

        shallow(<Disclosure buttonProps={buttonProps} idContent={someId}>{content}</Disclosure>);

        expect(useId).toHaveBeenCalledWith(someId);
    });

    it('sets div content id to id generated by useId', () => {
        const wrapper = mountWithProviders(
            <Disclosure buttonProps={buttonProps}>{content}</Disclosure>,
        );

        expect(wrapper.find('div').prop('id')).toBe(idContent);
    });

    it('sets button aria-controls to id generated by useId', () => {
        const wrapper = shallow(<Disclosure buttonProps={buttonProps}>{content}</Disclosure>);

        expect(wrapper.find(Button).prop('aria-controls')).toBe(idContent);
    });

    it('toggles expanded state when button is clicked', () => {
        const wrapper = mountWithProviders(
            <Disclosure buttonProps={buttonProps}>{content}</Disclosure>,
        );
        const button = wrapper.find(Button);

        expect(button.prop('aria-expanded')).toBe(false);
        button.simulate('click');

        expect(wrapper.find(Button).prop('aria-expanded')).toBe(true);
        button.simulate('click');
        expect(wrapper.find(Button).prop('aria-expanded')).toBe(false);
    });

    it('does not render children when button has not been clicked yet', () => {
        const childrenContent = <p>Test Content</p>;

        const wrapper = shallow(<Disclosure buttonProps={buttonProps}>{childrenContent}</Disclosure>);

        expect(wrapper.find('div').contains(childrenContent)).toBe(false);
    });

    it('renders children correctly after button is clicked', () => {
        const childrenContent = <p>Test Content</p>;
        const wrapper = mountWithProviders(
            <Disclosure buttonProps={buttonProps}>{childrenContent}</Disclosure>,
        );
        const button = wrapper.find(Button);

        button.simulate('click');

        expect(wrapper.find('div').exists()).toBe(true);
        expect(wrapper.find('div').contains(childrenContent)).toBe(true);
    });
});
